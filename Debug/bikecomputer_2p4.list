
bikecomputer_2p4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042dc  080042dc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080042dc  080042dc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042dc  080042dc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080042f0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080042f0  00006094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c192  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  000121ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000140c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acb  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003de6  00000000  00000000  000159fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c261  00000000  00000000  000197e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb64a  00000000  00000000  00025a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e108c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d50  00000000  00000000  000e10d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e4e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800428c 	.word	0x0800428c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800428c 	.word	0x0800428c

080001cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__NVIC_GetPriorityGrouping+0x18>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	f003 0307 	and.w	r3, r3, #7
}
 80001da:	4618      	mov	r0, r3
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	@ (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	@ (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	@ (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000278:	b480      	push	{r7}
 800027a:	b089      	sub	sp, #36	@ 0x24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	f003 0307 	and.w	r3, r3, #7
 800028a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	69fb      	ldr	r3, [r7, #28]
 800028e:	f1c3 0307 	rsb	r3, r3, #7
 8000292:	2b04      	cmp	r3, #4
 8000294:	bf28      	it	cs
 8000296:	2304      	movcs	r3, #4
 8000298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	3304      	adds	r3, #4
 800029e:	2b06      	cmp	r3, #6
 80002a0:	d902      	bls.n	80002a8 <NVIC_EncodePriority+0x30>
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3b03      	subs	r3, #3
 80002a6:	e000      	b.n	80002aa <NVIC_EncodePriority+0x32>
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	f04f 32ff 	mov.w	r2, #4294967295
 80002b0:	69bb      	ldr	r3, [r7, #24]
 80002b2:	fa02 f303 	lsl.w	r3, r2, r3
 80002b6:	43da      	mvns	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	401a      	ands	r2, r3
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	43d9      	mvns	r1, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d0:	4313      	orrs	r3, r2
         );
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3724      	adds	r7, #36	@ 0x24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	609a      	str	r2, [r3, #8]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000304:	b480      	push	{r7}
 8000306:	b087      	sub	sp, #28
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3330      	adds	r3, #48	@ 0x30
 8000314:	461a      	mov	r2, r3
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	f003 030c 	and.w	r3, r3, #12
 8000320:	4413      	add	r3, r2
 8000322:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	f003 031f 	and.w	r3, r3, #31
 800032e:	211f      	movs	r1, #31
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	0e9b      	lsrs	r3, r3, #26
 800033c:	f003 011f 	and.w	r1, r3, #31
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	f003 031f 	and.w	r3, r3, #31
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000350:	bf00      	nop
 8000352:	371c      	adds	r7, #28
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3314      	adds	r3, #20
 800036c:	461a      	mov	r2, r3
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	0e5b      	lsrs	r3, r3, #25
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	0d1b      	lsrs	r3, r3, #20
 8000384:	f003 031f 	and.w	r3, r3, #31
 8000388:	2107      	movs	r1, #7
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	0d1b      	lsrs	r3, r3, #20
 8000396:	f003 031f 	and.w	r3, r3, #31
 800039a:	6879      	ldr	r1, [r7, #4]
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	431a      	orrs	r2, r3
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80003a6:	bf00      	nop
 80003a8:	371c      	adds	r7, #28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003cc:	43db      	mvns	r3, r3
 80003ce:	401a      	ands	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f003 0318 	and.w	r3, r3, #24
 80003d6:	4908      	ldr	r1, [pc, #32]	@ (80003f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80003d8:	40d9      	lsrs	r1, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	400b      	ands	r3, r1
 80003de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003e2:	431a      	orrs	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	0007ffff 	.word	0x0007ffff

080003fc <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	611a      	str	r2, [r3, #16]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000436:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	6093      	str	r3, [r2, #8]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800045a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800045e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000484:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000498:	f023 0310 	bic.w	r3, r3, #16
 800049c:	4908      	ldr	r1, [pc, #32]	@ (80004c0 <LL_DMA_SetDataTransferDirection+0x4c>)
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	440a      	add	r2, r1
 80004a2:	7812      	ldrb	r2, [r2, #0]
 80004a4:	4611      	mov	r1, r2
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	440a      	add	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004b2:	bf00      	nop
 80004b4:	371c      	adds	r7, #28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	080042a4 	.word	0x080042a4

080004c4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <LL_DMA_SetMode+0x48>)
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	4413      	add	r3, r2
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 0220 	bic.w	r2, r3, #32
 80004e8:	4908      	ldr	r1, [pc, #32]	@ (800050c <LL_DMA_SetMode+0x48>)
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	440b      	add	r3, r1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	440b      	add	r3, r1
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80004fe:	bf00      	nop
 8000500:	371c      	adds	r7, #28
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	080042a4 	.word	0x080042a4

08000510 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <LL_DMA_SetPeriphIncMode+0x48>)
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	4413      	add	r3, r2
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000534:	4908      	ldr	r1, [pc, #32]	@ (8000558 <LL_DMA_SetPeriphIncMode+0x48>)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	440b      	add	r3, r1
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	440b      	add	r3, r1
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800054a:	bf00      	nop
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	080042a4 	.word	0x080042a4

0800055c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <LL_DMA_SetMemoryIncMode+0x48>)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	4413      	add	r3, r2
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000580:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <LL_DMA_SetMemoryIncMode+0x48>)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	440b      	add	r3, r1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	440b      	add	r3, r1
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4313      	orrs	r3, r2
 8000594:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	080042a4 	.word	0x080042a4

080005a8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LL_DMA_SetPeriphSize+0x48>)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <LL_DMA_SetPeriphSize+0x48>)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	440b      	add	r3, r1
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005e2:	bf00      	nop
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	080042a4 	.word	0x080042a4

080005f4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <LL_DMA_SetMemorySize+0x48>)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4413      	add	r3, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000618:	4908      	ldr	r1, [pc, #32]	@ (800063c <LL_DMA_SetMemorySize+0x48>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	440b      	add	r3, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	440b      	add	r3, r1
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	080042a4 	.word	0x080042a4

08000640 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000664:	4908      	ldr	r1, [pc, #32]	@ (8000688 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	440b      	add	r3, r1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	440b      	add	r3, r1
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
             Priority);
}
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	080042a4 	.word	0x080042a4

0800068c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	@ 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	33a8      	adds	r3, #168	@ 0xa8
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	f003 031c 	and.w	r3, r3, #28
 80006a6:	210f      	movs	r1, #15
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	401a      	ands	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	f003 031c 	and.w	r3, r3, #28
 80006b8:	210f      	movs	r1, #15
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	fa93 f3a3 	rbit	r3, r3
 80006c6:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <LL_DMA_SetPeriphRequest+0x4a>
  {
    return 32U;
 80006d2:	2320      	movs	r3, #32
 80006d4:	e003      	b.n	80006de <LL_DMA_SetPeriphRequest+0x52>
  }
  return __builtin_clz(value);
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	fab3 f383 	clz	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	408b      	lsls	r3, r1
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	31a8      	adds	r1, #168	@ 0xa8
 80006e8:	4313      	orrs	r3, r2
 80006ea:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << (((Channel) * 4U) & 0x1FU), PeriphRequest << DMA_POSITION_CSELR_CXS(Channel));
}
 80006ec:	bf00      	nop
 80006ee:	3724      	adds	r7, #36	@ 0x24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <LL_RCC_HSI_Enable+0x1c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <LL_RCC_HSI_Enable+0x1c>)
 8000702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <LL_RCC_HSI_IsReady+0x24>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000728:	d101      	bne.n	800072e <LL_RCC_HSI_IsReady+0x16>
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <LL_RCC_HSI_IsReady+0x18>
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	061b      	lsls	r3, r3, #24
 8000754:	4904      	ldr	r1, [pc, #16]	@ (8000768 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000756:	4313      	orrs	r3, r2
 8000758:	604b      	str	r3, [r1, #4]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <LL_RCC_HSI48_Enable+0x20>)
 8000772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000776:	4a05      	ldr	r2, [pc, #20]	@ (800078c <LL_RCC_HSI48_Enable+0x20>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RCC_CRRCR_HSI48RDY) ? 1UL : 0UL);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <LL_RCC_HSI48_IsReady+0x24>)
 8000796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d101      	bne.n	80007a6 <LL_RCC_HSI48_IsReady+0x16>
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <LL_RCC_HSI48_IsReady+0x18>
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <LL_RCC_LSE_Enable+0x20>)
 80007be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <LL_RCC_LSE_Enable+0x20>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80007e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007ea:	f023 0218 	bic.w	r2, r3, #24
 80007ee:	4905      	ldr	r1, [pc, #20]	@ (8000804 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000

08000808 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <LL_RCC_LSE_IsReady+0x24>)
 800080e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b02      	cmp	r3, #2
 8000818:	d101      	bne.n	800081e <LL_RCC_LSE_IsReady+0x16>
 800081a:	2301      	movs	r3, #1
 800081c:	e000      	b.n	8000820 <LL_RCC_LSE_IsReady+0x18>
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <LL_RCC_SetSysClkSource+0x24>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f023 0203 	bic.w	r2, r3, #3
 8000840:	4904      	ldr	r1, [pc, #16]	@ (8000854 <LL_RCC_SetSysClkSource+0x24>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	608b      	str	r3, [r1, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <LL_RCC_GetSysClkSource+0x18>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 030c 	and.w	r3, r3, #12
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <LL_RCC_SetAHBPrescaler+0x24>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000884:	4904      	ldr	r1, [pc, #16]	@ (8000898 <LL_RCC_SetAHBPrescaler+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	608b      	str	r3, [r1, #8]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80008ac:	4904      	ldr	r1, [pc, #16]	@ (80008c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	608b      	str	r3, [r1, #8]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80008d4:	4904      	ldr	r1, [pc, #16]	@ (80008e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	608b      	str	r3, [r1, #8]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_RCC_SetRNGClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRNGClockSource(uint32_t RNGxSource)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <LL_RCC_SetRNGClockSource+0x28>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80008fe:	4905      	ldr	r1, [pc, #20]	@ (8000914 <LL_RCC_SetRNGClockSource+0x28>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000

08000918 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <LL_RCC_SetRTCClockSource+0x28>)
 8000922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000926:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800092a:	4905      	ldr	r1, [pc, #20]	@ (8000940 <LL_RCC_SetRTCClockSource+0x28>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000948:	4b04      	ldr	r3, [pc, #16]	@ (800095c <LL_RCC_GetRTCClockSource+0x18>)
 800094a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800094e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000

08000960 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <LL_RCC_EnableRTC+0x20>)
 8000966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <LL_RCC_EnableRTC+0x20>)
 800096c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <LL_RCC_ForceBackupDomainReset+0x20>)
 800098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 80009ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 80009b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <LL_RCC_PLL_Enable+0x1c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <LL_RCC_PLL_Enable+0x1c>)
 80009d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <LL_RCC_PLL_IsReady+0x24>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80009fc:	d101      	bne.n	8000a02 <LL_RCC_PLL_IsReady+0x16>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <LL_RCC_PLL_IsReady+0x18>
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	68f9      	ldr	r1, [r7, #12]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	4311      	orrs	r1, r2
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	0212      	lsls	r2, r2, #8
 8000a34:	4311      	orrs	r1, r2
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	4904      	ldr	r1, [pc, #16]	@ (8000a4c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	f9ff808c 	.word	0xf9ff808c

08000a54 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000a80:	4907      	ldr	r1, [pc, #28]	@ (8000aa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ab0:	4907      	ldr	r1, [pc, #28]	@ (8000ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ade:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ae0:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4013      	ands	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000

08000b04 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <LL_APB1_GRP1_IsEnabledClock+0x28>)
 8000b0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d101      	bne.n	8000b1e <LL_APB1_GRP1_IsEnabledClock+0x1a>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <LL_APB1_GRP1_IsEnabledClock+0x1c>
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <LL_APB1_GRP1_DisableClock+0x24>)
 8000b3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4904      	ldr	r1, [pc, #16]	@ (8000b54 <LL_APB1_GRP1_DisableClock+0x24>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b64:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000

08000b88 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << POSITION_VAL((Line >> LL_EXTI_REGISTER_PINPOS_SHFT)));
 8000b92:	4a18      	ldr	r2, [pc, #96]	@ (8000bf4 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	ea02 0103 	and.w	r1, r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	0c1b      	lsrs	r3, r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	60fb      	str	r3, [r7, #12]
  return result;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <LL_SYSCFG_SetEXTISource+0x3e>
    return 32U;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	e003      	b.n	8000bce <LL_SYSCFG_SetEXTISource+0x46>
  return __builtin_clz(value);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	fa03 f202 	lsl.w	r2, r3, r2
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	430a      	orrs	r2, r1
 8000be0:	3302      	adds	r3, #2
 8000be2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000be6:	bf00      	nop
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <LL_FLASH_SetLatency+0x24>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 0207 	bic.w	r2, r3, #7
 8000c08:	4904      	ldr	r1, [pc, #16]	@ (8000c1c <LL_FLASH_SetLatency+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40022000 	.word	0x40022000

08000c20 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <LL_FLASH_GetLatency+0x18>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0307 	and.w	r3, r3, #7
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40022000 	.word	0x40022000

08000c3c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000c4c:	4904      	ldr	r1, [pc, #16]	@ (8000c60 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40007000 	.word	0x40007000

08000c64 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40007000 	.word	0x40007000

08000c84 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <LL_PWR_IsEnabledBkUpAccess+0x24>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c94:	d101      	bne.n	8000c9a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40007000 	.word	0x40007000

08000cac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cbc:	d101      	bne.n	8000cc2 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f043 0204 	orr.w	r2, r3, #4
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_RTC_EnableIT_ALRA>:
  * @rmtoll RTC_CR           ALRAIE        LL_RTC_EnableIT_ALRA
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_ALRA(RTC_TypeDef *RTCx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d028      	beq.n	8000d96 <LL_TIM_OC_DisableFast+0x62>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d023      	beq.n	8000d92 <LL_TIM_OC_DisableFast+0x5e>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b10      	cmp	r3, #16
 8000d4e:	d01e      	beq.n	8000d8e <LL_TIM_OC_DisableFast+0x5a>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2b40      	cmp	r3, #64	@ 0x40
 8000d54:	d019      	beq.n	8000d8a <LL_TIM_OC_DisableFast+0x56>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d5c:	d013      	beq.n	8000d86 <LL_TIM_OC_DisableFast+0x52>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d64:	d00d      	beq.n	8000d82 <LL_TIM_OC_DisableFast+0x4e>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d6c:	d007      	beq.n	8000d7e <LL_TIM_OC_DisableFast+0x4a>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d74:	d101      	bne.n	8000d7a <LL_TIM_OC_DisableFast+0x46>
 8000d76:	2307      	movs	r3, #7
 8000d78:	e00e      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	e00c      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e00a      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d82:	2305      	movs	r3, #5
 8000d84:	e008      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d86:	2304      	movs	r3, #4
 8000d88:	e006      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <LL_TIM_OC_DisableFast+0x64>
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3318      	adds	r3, #24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <LL_TIM_OC_DisableFast+0x9c>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	440b      	add	r3, r1
 8000da8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	4908      	ldr	r1, [pc, #32]	@ (8000dd4 <LL_TIM_OC_DisableFast+0xa0>)
 8000db2:	5ccb      	ldrb	r3, [r1, r3]
 8000db4:	4619      	mov	r1, r3
 8000db6:	2304      	movs	r3, #4
 8000db8:	408b      	lsls	r3, r1
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	601a      	str	r2, [r3, #0]

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	080042ac 	.word	0x080042ac
 8000dd4:	080042b8 	.word	0x080042b8

08000dd8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d028      	beq.n	8000e3a <LL_TIM_OC_EnablePreload+0x62>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d023      	beq.n	8000e36 <LL_TIM_OC_EnablePreload+0x5e>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d01e      	beq.n	8000e32 <LL_TIM_OC_EnablePreload+0x5a>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b40      	cmp	r3, #64	@ 0x40
 8000df8:	d019      	beq.n	8000e2e <LL_TIM_OC_EnablePreload+0x56>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e00:	d013      	beq.n	8000e2a <LL_TIM_OC_EnablePreload+0x52>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e08:	d00d      	beq.n	8000e26 <LL_TIM_OC_EnablePreload+0x4e>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e10:	d007      	beq.n	8000e22 <LL_TIM_OC_EnablePreload+0x4a>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e18:	d101      	bne.n	8000e1e <LL_TIM_OC_EnablePreload+0x46>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00e      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00c      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <LL_TIM_OC_EnablePreload+0x64>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3318      	adds	r3, #24
 8000e42:	4619      	mov	r1, r3
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LL_TIM_OC_EnablePreload+0x98>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4907      	ldr	r1, [pc, #28]	@ (8000e74 <LL_TIM_OC_EnablePreload+0x9c>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	080042ac 	.word	0x080042ac
 8000e74:	080042b8 	.word	0x080042b8

08000e78 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d028      	beq.n	8000edc <LL_TIM_IC_SetActiveInput+0x64>
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d023      	beq.n	8000ed8 <LL_TIM_IC_SetActiveInput+0x60>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d01e      	beq.n	8000ed4 <LL_TIM_IC_SetActiveInput+0x5c>
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2b40      	cmp	r3, #64	@ 0x40
 8000e9a:	d019      	beq.n	8000ed0 <LL_TIM_IC_SetActiveInput+0x58>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ea2:	d013      	beq.n	8000ecc <LL_TIM_IC_SetActiveInput+0x54>
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eaa:	d00d      	beq.n	8000ec8 <LL_TIM_IC_SetActiveInput+0x50>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eb2:	d007      	beq.n	8000ec4 <LL_TIM_IC_SetActiveInput+0x4c>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eba:	d101      	bne.n	8000ec0 <LL_TIM_IC_SetActiveInput+0x48>
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	e00e      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	e00c      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	e00a      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ec8:	2305      	movs	r3, #5
 8000eca:	e008      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e006      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e004      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <LL_TIM_IC_SetActiveInput+0x66>
 8000edc:	2300      	movs	r3, #0
 8000ede:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <LL_TIM_IC_SetActiveInput+0xac>)
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	440b      	add	r3, r1
 8000eee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <LL_TIM_IC_SetActiveInput+0xb0>)
 8000ef8:	5ccb      	ldrb	r3, [r1, r3]
 8000efa:	4619      	mov	r1, r3
 8000efc:	2303      	movs	r3, #3
 8000efe:	408b      	lsls	r3, r1
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	7df9      	ldrb	r1, [r7, #23]
 8000f0a:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <LL_TIM_IC_SetActiveInput+0xb0>)
 8000f0c:	5c41      	ldrb	r1, [r0, r1]
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	080042ac 	.word	0x080042ac
 8000f28:	080042c4 	.word	0x080042c4

08000f2c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d028      	beq.n	8000f90 <LL_TIM_IC_SetPrescaler+0x64>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d023      	beq.n	8000f8c <LL_TIM_IC_SetPrescaler+0x60>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d01e      	beq.n	8000f88 <LL_TIM_IC_SetPrescaler+0x5c>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b40      	cmp	r3, #64	@ 0x40
 8000f4e:	d019      	beq.n	8000f84 <LL_TIM_IC_SetPrescaler+0x58>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f56:	d013      	beq.n	8000f80 <LL_TIM_IC_SetPrescaler+0x54>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f5e:	d00d      	beq.n	8000f7c <LL_TIM_IC_SetPrescaler+0x50>
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f66:	d007      	beq.n	8000f78 <LL_TIM_IC_SetPrescaler+0x4c>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f6e:	d101      	bne.n	8000f74 <LL_TIM_IC_SetPrescaler+0x48>
 8000f70:	2307      	movs	r3, #7
 8000f72:	e00e      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f74:	2308      	movs	r3, #8
 8000f76:	e00c      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f78:	2306      	movs	r3, #6
 8000f7a:	e00a      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e008      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e006      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_TIM_IC_SetPrescaler+0x66>
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3318      	adds	r3, #24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <LL_TIM_IC_SetPrescaler+0xac>)
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <LL_TIM_IC_SetPrescaler+0xb0>)
 8000fac:	5ccb      	ldrb	r3, [r1, r3]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	7df9      	ldrb	r1, [r7, #23]
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <LL_TIM_IC_SetPrescaler+0xb0>)
 8000fc0:	5c41      	ldrb	r1, [r0, r1]
 8000fc2:	408b      	lsls	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	080042ac 	.word	0x080042ac
 8000fdc:	080042c4 	.word	0x080042c4

08000fe0 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d028      	beq.n	8001044 <LL_TIM_IC_SetFilter+0x64>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d023      	beq.n	8001040 <LL_TIM_IC_SetFilter+0x60>
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b10      	cmp	r3, #16
 8000ffc:	d01e      	beq.n	800103c <LL_TIM_IC_SetFilter+0x5c>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b40      	cmp	r3, #64	@ 0x40
 8001002:	d019      	beq.n	8001038 <LL_TIM_IC_SetFilter+0x58>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800100a:	d013      	beq.n	8001034 <LL_TIM_IC_SetFilter+0x54>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001012:	d00d      	beq.n	8001030 <LL_TIM_IC_SetFilter+0x50>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800101a:	d007      	beq.n	800102c <LL_TIM_IC_SetFilter+0x4c>
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001022:	d101      	bne.n	8001028 <LL_TIM_IC_SetFilter+0x48>
 8001024:	2307      	movs	r3, #7
 8001026:	e00e      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001028:	2308      	movs	r3, #8
 800102a:	e00c      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 800102c:	2306      	movs	r3, #6
 800102e:	e00a      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001030:	2305      	movs	r3, #5
 8001032:	e008      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001034:	2304      	movs	r3, #4
 8001036:	e006      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001038:	2303      	movs	r3, #3
 800103a:	e004      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <LL_TIM_IC_SetFilter+0x66>
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3318      	adds	r3, #24
 800104c:	4619      	mov	r1, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <LL_TIM_IC_SetFilter+0xac>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	440b      	add	r3, r1
 8001056:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	490c      	ldr	r1, [pc, #48]	@ (8001090 <LL_TIM_IC_SetFilter+0xb0>)
 8001060:	5ccb      	ldrb	r3, [r1, r3]
 8001062:	4619      	mov	r1, r3
 8001064:	23f0      	movs	r3, #240	@ 0xf0
 8001066:	408b      	lsls	r3, r1
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0c1b      	lsrs	r3, r3, #16
 8001070:	7df9      	ldrb	r1, [r7, #23]
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <LL_TIM_IC_SetFilter+0xb0>)
 8001074:	5c41      	ldrb	r1, [r0, r1]
 8001076:	408b      	lsls	r3, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	080042ac 	.word	0x080042ac
 8001090:	080042c4 	.word	0x080042c4

08001094 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d028      	beq.n	80010f8 <LL_TIM_IC_SetPolarity+0x64>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d023      	beq.n	80010f4 <LL_TIM_IC_SetPolarity+0x60>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d01e      	beq.n	80010f0 <LL_TIM_IC_SetPolarity+0x5c>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b40      	cmp	r3, #64	@ 0x40
 80010b6:	d019      	beq.n	80010ec <LL_TIM_IC_SetPolarity+0x58>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010be:	d013      	beq.n	80010e8 <LL_TIM_IC_SetPolarity+0x54>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c6:	d00d      	beq.n	80010e4 <LL_TIM_IC_SetPolarity+0x50>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ce:	d007      	beq.n	80010e0 <LL_TIM_IC_SetPolarity+0x4c>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d6:	d101      	bne.n	80010dc <LL_TIM_IC_SetPolarity+0x48>
 80010d8:	2307      	movs	r3, #7
 80010da:	e00e      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010dc:	2308      	movs	r3, #8
 80010de:	e00c      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010e0:	2306      	movs	r3, #6
 80010e2:	e00a      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010e4:	2305      	movs	r3, #5
 80010e6:	e008      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e006      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010ec:	2303      	movs	r3, #3
 80010ee:	e004      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e002      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_TIM_IC_SetPolarity+0x66>
 80010f8:	2300      	movs	r3, #0
 80010fa:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a1a      	ldr	r2, [r3, #32]
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	490b      	ldr	r1, [pc, #44]	@ (8001130 <LL_TIM_IC_SetPolarity+0x9c>)
 8001104:	5ccb      	ldrb	r3, [r1, r3]
 8001106:	4619      	mov	r1, r3
 8001108:	230a      	movs	r3, #10
 800110a:	408b      	lsls	r3, r1
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	4907      	ldr	r1, [pc, #28]	@ (8001130 <LL_TIM_IC_SetPolarity+0x9c>)
 8001114:	5ccb      	ldrb	r3, [r1, r3]
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	408b      	lsls	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	080042d0 	.word	0x080042d0

08001134 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	605a      	str	r2, [r3, #4]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4319      	orrs	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	430b      	orrs	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f023 0208 	bic.w	r2, r3, #8
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b08b      	sub	sp, #44	@ 0x2c
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	613b      	str	r3, [r7, #16]
  return result;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001218:	2320      	movs	r3, #32
 800121a:	e003      	b.n	8001224 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2103      	movs	r1, #3
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	61fb      	str	r3, [r7, #28]
  return result;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001246:	2320      	movs	r3, #32
 8001248:	e003      	b.n	8001252 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	372c      	adds	r7, #44	@ 0x2c
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800126c:	b480      	push	{r7}
 800126e:	b08b      	sub	sp, #44	@ 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	613b      	str	r3, [r7, #16]
  return result;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001292:	2320      	movs	r3, #32
 8001294:	e003      	b.n	800129e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2103      	movs	r1, #3
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	401a      	ands	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	61fb      	str	r3, [r7, #28]
  return result;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80012c0:	2320      	movs	r3, #32
 80012c2:	e003      	b.n	80012cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	431a      	orrs	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	60da      	str	r2, [r3, #12]
}
 80012da:	bf00      	nop
 80012dc:	372c      	adds	r7, #44	@ 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f000 fed9 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f815 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 fc41 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800132e:	f000 fc27 	bl	8001b80 <MX_DMA_Init>
  MX_RNG_Init();
 8001332:	f000 f989 	bl	8001648 <MX_RNG_Init>
  MX_RTC_Init();
 8001336:	f000 f997 	bl	8001668 <MX_RTC_Init>
  MX_SPI1_Init();
 800133a:	f000 fa41 	bl	80017c0 <MX_SPI1_Init>
  MX_ADC1_Init();
 800133e:	f000 f871 	bl	8001424 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001342:	f000 fa7b 	bl	800183c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001346:	f000 fb4f 	bl	80019e8 <MX_TIM6_Init>
  MX_TIM15_Init();
 800134a:	f000 fb87 	bl	8001a5c <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <main+0x30>
	...

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001358:	2002      	movs	r0, #2
 800135a:	f7ff fc4d 	bl	8000bf8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800135e:	bf00      	nop
 8001360:	f7ff fc5e 	bl	8000c20 <LL_FLASH_GetLatency>
 8001364:	4603      	mov	r3, r0
 8001366:	2b02      	cmp	r3, #2
 8001368:	d1fa      	bne.n	8001360 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800136a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800136e:	f7ff fc65 	bl	8000c3c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001372:	bf00      	nop
 8001374:	f7ff fc9a 	bl	8000cac <LL_PWR_IsActiveFlag_VOS>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1fa      	bne.n	8001374 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 800137e:	f7ff f9bb 	bl	80006f8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001382:	bf00      	nop
 8001384:	f7ff f9c8 	bl	8000718 <LL_RCC_HSI_IsReady>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1fa      	bne.n	8001384 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 800138e:	2040      	movs	r0, #64	@ 0x40
 8001390:	f7ff f9d6 	bl	8000740 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI48_Enable();
 8001394:	f7ff f9ea 	bl	800076c <LL_RCC_HSI48_Enable>

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 8001398:	bf00      	nop
 800139a:	f7ff f9f9 	bl	8000790 <LL_RCC_HSI48_IsReady>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d1fa      	bne.n	800139a <SystemClock_Config+0x46>
  {

  }
  LL_PWR_EnableBkUpAccess();
 80013a4:	f7ff fc5e 	bl	8000c64 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fa17 	bl	80007dc <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80013ae:	f7ff fa03 	bl	80007b8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 80013b2:	bf00      	nop
 80013b4:	f7ff fa28 	bl	8000808 <LL_RCC_LSE_IsReady>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d1fa      	bne.n	80013b4 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_4);
 80013be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013c2:	220a      	movs	r2, #10
 80013c4:	2100      	movs	r1, #0
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fb24 	bl	8000a14 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80013cc:	f7ff fb42 	bl	8000a54 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80013d0:	f7ff fafc 	bl	80009cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013d4:	bf00      	nop
 80013d6:	f7ff fb09 	bl	80009ec <LL_RCC_PLL_IsReady>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d1fa      	bne.n	80013d6 <SystemClock_Config+0x82>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff fa25 	bl	8000830 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013e6:	bf00      	nop
 80013e8:	f7ff fa36 	bl	8000858 <LL_RCC_GetSysClkSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d1fa      	bne.n	80013e8 <SystemClock_Config+0x94>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fa3e 	bl	8000874 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fa4f 	bl	800089c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fa60 	bl	80008c4 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(40000000);
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <SystemClock_Config+0xcc>)
 8001406:	f002 ff05 	bl	8004214 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800140a:	200f      	movs	r0, #15
 800140c:	f000 fe84 	bl	8002118 <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001416:	f000 fce3 	bl	8001de0 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	02625a00 	.word	0x02625a00

08001424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	@ 0x50
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800142a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001466:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800146a:	f7ff fb1b 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fb18 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff fb15 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN6
  PB1   ------> ADC1_IN16
  */
  GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 800147a:	2302      	movs	r3, #2
 800147c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148e:	f001 fdd4 	bl	800303a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LIGHT_SENSE_Pin;
 8001492:	2302      	movs	r3, #2
 8001494:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LIGHT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	485e      	ldr	r0, [pc, #376]	@ (800161c <MX_ADC1_Init+0x1f8>)
 80014a4:	f001 fdc9 	bl	800303a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	485c      	ldr	r0, [pc, #368]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014ae:	f7ff f8ed 	bl	800068c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	485a      	ldr	r0, [pc, #360]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014b8:	f7fe ffdc 	bl	8000474 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	4857      	ldr	r0, [pc, #348]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014c2:	f7ff f8bd 	bl	8000640 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80014c6:	2220      	movs	r2, #32
 80014c8:	2100      	movs	r1, #0
 80014ca:	4855      	ldr	r0, [pc, #340]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014cc:	f7fe fffa 	bl	80004c4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	4852      	ldr	r0, [pc, #328]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014d6:	f7ff f81b 	bl	8000510 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	2100      	movs	r1, #0
 80014de:	4850      	ldr	r0, [pc, #320]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014e0:	f7ff f83c 	bl	800055c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80014e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e8:	2100      	movs	r1, #0
 80014ea:	484d      	ldr	r0, [pc, #308]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014ec:	f7ff f85c 	bl	80005a8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80014f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f4:	2100      	movs	r1, #0
 80014f6:	484a      	ldr	r0, [pc, #296]	@ (8001620 <MX_ADC1_Init+0x1fc>)
 80014f8:	f7ff f87c 	bl	80005f4 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80014fc:	2300      	movs	r3, #0
 80014fe:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001500:	2300      	movs	r3, #0
 8001502:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001508:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800150c:	4619      	mov	r1, r3
 800150e:	4845      	ldr	r0, [pc, #276]	@ (8001624 <MX_ADC1_Init+0x200>)
 8001510:	f001 f9b4 	bl	800287c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8001518:	2303      	movs	r3, #3
 800151a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8001524:	2301      	movs	r3, #1
 8001526:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800152c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001530:	4619      	mov	r1, r3
 8001532:	483c      	ldr	r0, [pc, #240]	@ (8001624 <MX_ADC1_Init+0x200>)
 8001534:	f001 f9c8 	bl	80028c8 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001538:	2100      	movs	r1, #0
 800153a:	483a      	ldr	r0, [pc, #232]	@ (8001624 <MX_ADC1_Init+0x200>)
 800153c:	f7fe ff5e 	bl	80003fc <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT|LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8001540:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8001544:	4838      	ldr	r0, [pc, #224]	@ (8001628 <MX_ADC1_Init+0x204>)
 8001546:	f7fe feca 	bl	80002de <LL_ADC_SetCommonPathInternalCh>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4619      	mov	r1, r3
 8001558:	4833      	ldr	r0, [pc, #204]	@ (8001628 <MX_ADC1_Init+0x204>)
 800155a:	f001 f94f 	bl	80027fc <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800155e:	4831      	ldr	r0, [pc, #196]	@ (8001624 <MX_ADC1_Init+0x200>)
 8001560:	f7fe ff61 	bl	8000426 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001564:	482f      	ldr	r0, [pc, #188]	@ (8001624 <MX_ADC1_Init+0x200>)
 8001566:	f7fe ff70 	bl	800044a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800156a:	4b30      	ldr	r3, [pc, #192]	@ (800162c <MX_ADC1_Init+0x208>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	4a2f      	ldr	r2, [pc, #188]	@ (8001630 <MX_ADC1_Init+0x20c>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	099a      	lsrs	r2, r3, #6
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	461a      	mov	r2, r3
 8001582:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <MX_ADC1_Init+0x210>)
 8001584:	fba3 2302 	umull	r2, r3, r3, r2
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 800158c:	e002      	b.n	8001594 <MX_ADC1_Init+0x170>
  {
    wait_loop_index--;
 800158e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001590:	3b01      	subs	r3, #1
 8001592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <MX_ADC1_Init+0x16a>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <MX_ADC1_Init+0x214>)
 800159c:	2106      	movs	r1, #6
 800159e:	4821      	ldr	r0, [pc, #132]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015a0:	f7fe feb0 	bl	8000304 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80015a4:	2206      	movs	r2, #6
 80015a6:	4924      	ldr	r1, [pc, #144]	@ (8001638 <MX_ADC1_Init+0x214>)
 80015a8:	481e      	ldr	r0, [pc, #120]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015aa:	f7fe fed7 	bl	800035c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 80015ae:	227f      	movs	r2, #127	@ 0x7f
 80015b0:	4921      	ldr	r1, [pc, #132]	@ (8001638 <MX_ADC1_Init+0x214>)
 80015b2:	481c      	ldr	r0, [pc, #112]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015b4:	f7fe fefe 	bl	80003b4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_16);
 80015b8:	4a20      	ldr	r2, [pc, #128]	@ (800163c <MX_ADC1_Init+0x218>)
 80015ba:	210c      	movs	r1, #12
 80015bc:	4819      	ldr	r0, [pc, #100]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015be:	f7fe fea1 	bl	8000304 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_16, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80015c2:	2206      	movs	r2, #6
 80015c4:	491d      	ldr	r1, [pc, #116]	@ (800163c <MX_ADC1_Init+0x218>)
 80015c6:	4817      	ldr	r0, [pc, #92]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015c8:	f7fe fec8 	bl	800035c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_16, LL_ADC_SINGLE_ENDED);
 80015cc:	227f      	movs	r2, #127	@ 0x7f
 80015ce:	491b      	ldr	r1, [pc, #108]	@ (800163c <MX_ADC1_Init+0x218>)
 80015d0:	4814      	ldr	r0, [pc, #80]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015d2:	f7fe feef 	bl	80003b4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_VREFINT);
 80015d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001640 <MX_ADC1_Init+0x21c>)
 80015d8:	2112      	movs	r1, #18
 80015da:	4812      	ldr	r0, [pc, #72]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015dc:	f7fe fe92 	bl	8000304 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80015e0:	2206      	movs	r2, #6
 80015e2:	4917      	ldr	r1, [pc, #92]	@ (8001640 <MX_ADC1_Init+0x21c>)
 80015e4:	480f      	ldr	r0, [pc, #60]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015e6:	f7fe feb9 	bl	800035c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80015ea:	227f      	movs	r2, #127	@ 0x7f
 80015ec:	4914      	ldr	r1, [pc, #80]	@ (8001640 <MX_ADC1_Init+0x21c>)
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015f0:	f7fe fee0 	bl	80003b4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_TEMPSENSOR);
 80015f4:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <MX_ADC1_Init+0x220>)
 80015f6:	2118      	movs	r1, #24
 80015f8:	480a      	ldr	r0, [pc, #40]	@ (8001624 <MX_ADC1_Init+0x200>)
 80015fa:	f7fe fe83 	bl	8000304 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80015fe:	2206      	movs	r2, #6
 8001600:	4910      	ldr	r1, [pc, #64]	@ (8001644 <MX_ADC1_Init+0x220>)
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <MX_ADC1_Init+0x200>)
 8001604:	f7fe feaa 	bl	800035c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SINGLE_ENDED);
 8001608:	227f      	movs	r2, #127	@ 0x7f
 800160a:	490e      	ldr	r1, [pc, #56]	@ (8001644 <MX_ADC1_Init+0x220>)
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_ADC1_Init+0x200>)
 800160e:	f7fe fed1 	bl	80003b4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	@ 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	48000400 	.word	0x48000400
 8001620:	40020000 	.word	0x40020000
 8001624:	50040000 	.word	0x50040000
 8001628:	50040300 	.word	0x50040300
 800162c:	20000000 	.word	0x20000000
 8001630:	053e2d63 	.word	0x053e2d63
 8001634:	cccccccd 	.word	0xcccccccd
 8001638:	19200040 	.word	0x19200040
 800163c:	43210000 	.word	0x43210000
 8001640:	80000001 	.word	0x80000001
 8001644:	c7520000 	.word	0xc7520000

08001648 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  LL_RCC_SetRNGClockSource(LL_RCC_RNG_CLKSOURCE_HSI48);
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff f94d 	bl	80008ec <LL_RCC_SetRNGClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8001652:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001656:	f7ff fa25 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
 800165a:	4802      	ldr	r0, [pc, #8]	@ (8001664 <MX_RNG_Init+0x1c>)
 800165c:	f7ff fb3a 	bl	8000cd4 <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	50060800 	.word	0x50060800

08001668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	@ 0x30
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  LL_RTC_AlarmTypeDef RTC_AlarmStruct = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001696:	f7ff f955 	bl	8000944 <LL_RCC_GetRTCClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016a0:	d038      	beq.n	8001714 <MX_RTC_Init+0xac>
  {
    FlagStatus pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* Update LSE configuration in Backup Domain control register */
    /* Requires to enable write access to Backup Domain if necessary */
    if (LL_APB1_GRP1_IsEnabledClock (LL_APB1_GRP1_PERIPH_PWR) != 1U)
 80016a8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80016ac:	f7ff fa2a 	bl	8000b04 <LL_APB1_GRP1_IsEnabledClock>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d006      	beq.n	80016c4 <MX_RTC_Init+0x5c>
    {
      /* Enables the PWR Clock and Enables access to the backup domain */
      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80016b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80016ba:	f7ff fa0b 	bl	8000ad4 <LL_APB1_GRP1_EnableClock>
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    if (LL_PWR_IsEnabledBkUpAccess () != 1U)
 80016c4:	f7ff fade 	bl	8000c84 <LL_PWR_IsEnabledBkUpAccess>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d007      	beq.n	80016de <MX_RTC_Init+0x76>
    {
      /* Enable write access to Backup domain */
      LL_PWR_EnableBkUpAccess();
 80016ce:	f7ff fac9 	bl	8000c64 <LL_PWR_EnableBkUpAccess>
      while (LL_PWR_IsEnabledBkUpAccess () == 0U)
 80016d2:	bf00      	nop
 80016d4:	f7ff fad6 	bl	8000c84 <LL_PWR_IsEnabledBkUpAccess>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0fa      	beq.n	80016d4 <MX_RTC_Init+0x6c>
      {
      }
    }
    LL_RCC_ForceBackupDomainReset();
 80016de:	f7ff f951 	bl	8000984 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 80016e2:	f7ff f961 	bl	80009a8 <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff f878 	bl	80007dc <LL_RCC_LSE_SetDriveCapability>
    LL_RCC_LSE_Enable();
 80016ec:	f7ff f864 	bl	80007b8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
    while(LL_RCC_LSE_IsReady() != 1)
 80016f0:	bf00      	nop
 80016f2:	f7ff f889 	bl	8000808 <LL_RCC_LSE_IsReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1fa      	bne.n	80016f2 <MX_RTC_Init+0x8a>
    {
    }
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 80016fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001700:	f7ff f90a 	bl	8000918 <LL_RCC_SetRTCClockSource>
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001704:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001708:	2b01      	cmp	r3, #1
 800170a:	d103      	bne.n	8001714 <MX_RTC_Init+0xac>
    {
      LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 800170c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001710:	f7ff fa0e 	bl	8000b30 <LL_APB1_GRP1_DisableClock>
    }
  }

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8001714:	f7ff f924 	bl	8000960 <LL_RCC_EnableRTC>

  /* RTC interrupt Init */
  NVIC_SetPriority(RTC_Alarm_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001718:	f7fe fd58 	bl	80001cc <__NVIC_GetPriorityGrouping>
 800171c:	4603      	mov	r3, r0
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fda8 	bl	8000278 <NVIC_EncodePriority>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	2029      	movs	r0, #41	@ 0x29
 800172e:	f7fe fd79 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001732:	2029      	movs	r0, #41	@ 0x29
 8001734:	f7fe fd58 	bl	80001e8 <__NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  RTC_InitStruct.AsynchPrescaler = 127;
 800173c:	237f      	movs	r3, #127	@ 0x7f
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  RTC_InitStruct.SynchPrescaler = 255;
 8001740:	23ff      	movs	r3, #255	@ 0xff
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4619      	mov	r1, r3
 800174a:	481c      	ldr	r0, [pc, #112]	@ (80017bc <MX_RTC_Init+0x154>)
 800174c:	f001 fe9a 	bl	8003484 <LL_RTC_Init>
  RTC_TimeStruct.Hours = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	773b      	strb	r3, [r7, #28]
  RTC_TimeStruct.Minutes = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	777b      	strb	r3, [r7, #29]
  RTC_TimeStruct.Seconds = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	77bb      	strb	r3, [r7, #30]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	461a      	mov	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	4815      	ldr	r0, [pc, #84]	@ (80017bc <MX_RTC_Init+0x154>)
 8001766:	f001 febd 	bl	80034e4 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 800176a:	2301      	movs	r3, #1
 800176c:	753b      	strb	r3, [r7, #20]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 800176e:	2301      	movs	r3, #1
 8001770:	757b      	strb	r3, [r7, #21]
  RTC_DateStruct.Day = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	75bb      	strb	r3, [r7, #22]
  RTC_DateStruct.Year = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	461a      	mov	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <MX_RTC_Init+0x154>)
 8001784:	f001 ff54 	bl	8003630 <LL_RTC_DATE_Init>

  /** Enable the Alarm A
  */
  RTC_AlarmStruct.AlarmTime.Hours = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	713b      	strb	r3, [r7, #4]
  RTC_AlarmStruct.AlarmTime.Minutes = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	717b      	strb	r3, [r7, #5]
  RTC_AlarmStruct.AlarmTime.Seconds = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	71bb      	strb	r3, [r7, #6]
  RTC_AlarmStruct.AlarmMask = LL_RTC_ALMA_MASK_ALL;
 8001794:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8001798:	60bb      	str	r3, [r7, #8]
  RTC_AlarmStruct.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  RTC_AlarmStruct.AlarmDateWeekDay = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	743b      	strb	r3, [r7, #16]
  LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_AlarmStruct);
 80017a2:	463b      	mov	r3, r7
 80017a4:	461a      	mov	r2, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	4804      	ldr	r0, [pc, #16]	@ (80017bc <MX_RTC_Init+0x154>)
 80017aa:	f001 ffe5 	bl	8003778 <LL_RTC_ALMA_Init>
  LL_RTC_EnableIT_ALRA(RTC);
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <MX_RTC_Init+0x154>)
 80017b0:	f7ff faa0 	bl	8000cf4 <LL_RTC_EnableIT_ALRA>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	@ 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800

080017c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <MX_SPI1_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_SPI1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_SPI1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_SPI1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_SPI1_Init+0x74>)
 800180e:	2207      	movs	r2, #7
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_SPI1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <MX_SPI1_Init+0x74>)
 800181a:	2208      	movs	r2, #8
 800181c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_SPI1_Init+0x74>)
 8001820:	f000 ff22 	bl	8002668 <HAL_SPI_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800182a:	f000 fad9 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000028 	.word	0x20000028
 8001838:	40013000 	.word	0x40013000

0800183c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	@ 0x50
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001842:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2220      	movs	r2, #32
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fcea 	bl	8004234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff f92f 	bl	8000ad4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff f914 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800187c:	2002      	movs	r0, #2
 800187e:	f7ff f911 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15 (JTDI)   ------> TIM2_CH1
  PB3 (JTDO/TRACESWO)   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = SPEED_SW_Pin;
 8001882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001886:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001888:	2302      	movs	r3, #2
 800188a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SPEED_SW_GPIO_Port, &GPIO_InitStruct);
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a4:	f001 fbc9 	bl	800303a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = CADENCE_SW_Pin;
 80018a8:	2308      	movs	r3, #8
 80018aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018ac:	2302      	movs	r3, #2
 80018ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80018bc:	2301      	movs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(CADENCE_SW_GPIO_Port, &GPIO_InitStruct);
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4846      	ldr	r0, [pc, #280]	@ (80019e0 <MX_TIM2_Init+0x1a4>)
 80018c6:	f001 fbb8 	bl	800303a <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018ca:	f7fe fc7f 	bl	80001cc <__NVIC_GetPriorityGrouping>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fccf 	bl	8000278 <NVIC_EncodePriority>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	201c      	movs	r0, #28
 80018e0:	f7fe fca0 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80018e4:	201c      	movs	r0, #28
 80018e6:	f7fe fc7f 	bl	80001e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 80000000;
 80018f2:	4b3c      	ldr	r3, [pc, #240]	@ (80019e4 <MX_TIM2_Init+0x1a8>)
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001904:	f002 f8f0 	bl	8003ae8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001908:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800190c:	f7ff fa02 	bl	8000d14 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	461a      	mov	r2, r3
 800192a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800192e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001932:	f002 f937 	bl	8003ba4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800193a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800193e:	f7ff f9f9 	bl	8000d34 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM2, LL_TIM_OCREF_CLR_INT_NC);
 8001942:	2100      	movs	r1, #0
 8001944:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001948:	f7ff fc40 	bl	80011cc <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM2);
 800194c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001950:	f7ff fbf0 	bl	8001134 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM2, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001954:	2300      	movs	r3, #0
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800195e:	f7ff fc1c 	bl	800119a <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001962:	2100      	movs	r1, #0
 8001964:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001968:	f7ff fbf4 	bl	8001154 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800196c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001970:	f7ff fc03 	bl	800117a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001974:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001978:	2101      	movs	r1, #1
 800197a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800197e:	f7ff fa7b 	bl	8000e78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001982:	2200      	movs	r2, #0
 8001984:	2101      	movs	r1, #1
 8001986:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800198a:	f7ff facf 	bl	8000f2c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800198e:	2200      	movs	r2, #0
 8001990:	2101      	movs	r1, #1
 8001992:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001996:	f7ff fb23 	bl	8000fe0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_FALLING);
 800199a:	2202      	movs	r2, #2
 800199c:	2101      	movs	r1, #1
 800199e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019a2:	f7ff fb77 	bl	8001094 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80019a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019aa:	2110      	movs	r1, #16
 80019ac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019b0:	f7ff fa62 	bl	8000e78 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2110      	movs	r1, #16
 80019b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019bc:	f7ff fab6 	bl	8000f2c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019c8:	f7ff fb0a 	bl	8000fe0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_FALLING);
 80019cc:	2202      	movs	r2, #2
 80019ce:	2110      	movs	r1, #16
 80019d0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80019d4:	f7ff fb5e 	bl	8001094 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3750      	adds	r7, #80	@ 0x50
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	48000400 	.word	0x48000400
 80019e4:	04c4b400 	.word	0x04c4b400

080019e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80019fc:	2010      	movs	r0, #16
 80019fe:	f7ff f869 	bl	8000ad4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001a02:	f7fe fbe3 	bl	80001cc <__NVIC_GetPriorityGrouping>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc33 	bl	8000278 <NVIC_EncodePriority>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	2036      	movs	r0, #54	@ 0x36
 8001a18:	f7fe fc04 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_IRQn);
 8001a1c:	2036      	movs	r0, #54	@ 0x36
 8001a1e:	f7fe fbe3 	bl	80001e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 40000;
 8001a2a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001a2e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4808      	ldr	r0, [pc, #32]	@ (8001a58 <MX_TIM6_Init+0x70>)
 8001a36:	f002 f857 	bl	8003ae8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001a3a:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <MX_TIM6_Init+0x70>)
 8001a3c:	f7ff f96a 	bl	8000d14 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_TIM6_Init+0x70>)
 8001a44:	f7ff fb86 	bl	8001154 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <MX_TIM6_Init+0x70>)
 8001a4a:	f7ff fb96 	bl	800117a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40001000 	.word	0x40001000

08001a5c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09e      	sub	sp, #120	@ 0x78
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a76:	2220      	movs	r2, #32
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fbda 	bl	8004234 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	2228      	movs	r2, #40	@ 0x28
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fbd3 	bl	8004234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 8001a9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001aa2:	f7ff f859 	bl	8000b58 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 627;
 8001aa6:	f240 2373 	movw	r3, #627	@ 0x273
 8001aaa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 255;
 8001ab2:	23ff      	movs	r3, #255	@ 0xff
 8001ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001abe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	482d      	ldr	r0, [pc, #180]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001ac6:	f002 f80f 	bl	8003ae8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8001aca:	482c      	ldr	r0, [pc, #176]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001acc:	f7ff f922 	bl	8000d14 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM15, LL_TIM_CHANNEL_CH1);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	482a      	ldr	r0, [pc, #168]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001ad4:	f7ff f980 	bl	8000dd8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001ad8:	2360      	movs	r3, #96	@ 0x60
 8001ada:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 50;
 8001ae4:	2332      	movs	r3, #50	@ 0x32
 8001ae6:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001af8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001afc:	461a      	mov	r2, r3
 8001afe:	2101      	movs	r1, #1
 8001b00:	481e      	ldr	r0, [pc, #120]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001b02:	f002 f84f 	bl	8003ba4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001b0a:	f7ff f913 	bl	8000d34 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001b12:	f7ff fb1f 	bl	8001154 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8001b16:	4819      	ldr	r0, [pc, #100]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001b18:	f7ff fb2f 	bl	800117a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <MX_TIM15_Init+0x120>)
 8001b44:	f002 f88e 	bl	8003c64 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7fe ffab 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  /**TIM15 GPIO Configuration
  PA2   ------> TIM15_CH1
  */
  GPIO_InitStruct.Pin = BACKLIGHT_PWM_Pin;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b52:	2302      	movs	r3, #2
 8001b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8001b62:	230e      	movs	r3, #14
 8001b64:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BACKLIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6e:	f001 fa64 	bl	800303a <LL_GPIO_Init>

}
 8001b72:	bf00      	nop
 8001b74:	3778      	adds	r7, #120	@ 0x78
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40014000 	.word	0x40014000

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7fe ff75 	bl	8000a74 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b8a:	f7fe fb1f 	bl	80001cc <__NVIC_GetPriorityGrouping>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fb6f 	bl	8000278 <NVIC_EncodePriority>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	200b      	movs	r0, #11
 8001ba0:	f7fe fb40 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ba4:	200b      	movs	r0, #11
 8001ba6:	f7fe fb1f 	bl	80001e8 <__NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f7fe ff66 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7fe ff63 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7fe ff60 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_CS_Pin|LCD_RES_Pin);
 8001be4:	2109      	movs	r1, #9
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bea:	f7ff fb7c 	bl	80012e6 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, ACC_CS_Pin|EEPROM_CS_Pin);
 8001bee:	f240 4101 	movw	r1, #1025	@ 0x401
 8001bf2:	4876      	ldr	r0, [pc, #472]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001bf4:	f7ff fb77 	bl	80012e6 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_DC_GPIO_Port, LCD_DC_Pin);
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfe:	f7ff fb80 	bl	8001302 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, FLASHLIGHT_Pin|D_LED_Pin);
 8001c02:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8001c06:	4871      	ldr	r0, [pc, #452]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001c08:	f7ff fb7b 	bl	8001302 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RES_Pin|LCD_DC_Pin;
 8001c0c:	2319      	movs	r3, #25
 8001c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c10:	2301      	movs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f001 fa07 	bl	800303a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACC_CS_Pin|EEPROM_CS_Pin|FLASHLIGHT_Pin|D_LED_Pin;
 8001c2c:	f640 5301 	movw	r3, #3329	@ 0xd01
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c32:	2301      	movs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4861      	ldr	r0, [pc, #388]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001c48:	f001 f9f7 	bl	800303a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	485b      	ldr	r0, [pc, #364]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001c5e:	f001 f9ec 	bl	800303a <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE12);
 8001c62:	495b      	ldr	r1, [pc, #364]	@ (8001dd0 <MX_GPIO_Init+0x220>)
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7fe ff8f 	bl	8000b88 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE13);
 8001c6a:	495a      	ldr	r1, [pc, #360]	@ (8001dd4 <MX_GPIO_Init+0x224>)
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7fe ff8b 	bl	8000b88 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE8);
 8001c72:	4959      	ldr	r1, [pc, #356]	@ (8001dd8 <MX_GPIO_Init+0x228>)
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7fe ff87 	bl	8000b88 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE9);
 8001c7a:	4958      	ldr	r1, [pc, #352]	@ (8001ddc <MX_GPIO_Init+0x22c>)
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7fe ff83 	bl	8000b88 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c86:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 ff8a 	bl	8002bbc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cac:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 ff77 	bl	8002bbc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001cce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 ff64 	bl	8002bbc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 ff51 	bl	8002bbc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN_JOBB_GPIO_Port, BTN_JOBB_Pin, LL_GPIO_PULL_NO);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d20:	482a      	ldr	r0, [pc, #168]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001d22:	f7ff faa3 	bl	800126c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN_ENTER_SYS_WKUP2_GPIO_Port, BTN_ENTER_SYS_WKUP2_Pin, LL_GPIO_PULL_NO);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d2c:	4827      	ldr	r0, [pc, #156]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001d2e:	f7ff fa9d 	bl	800126c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN_EXIT_GPIO_Port, BTN_EXIT_Pin, LL_GPIO_PULL_NO);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f7ff fa96 	bl	800126c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN_BAL_GPIO_Port, BTN_BAL_Pin, LL_GPIO_PULL_NO);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4a:	f7ff fa8f 	bl	800126c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN_JOBB_GPIO_Port, BTN_JOBB_Pin, LL_GPIO_MODE_INPUT);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d54:	481d      	ldr	r0, [pc, #116]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001d56:	f7ff fa4c 	bl	80011f2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN_ENTER_SYS_WKUP2_GPIO_Port, BTN_ENTER_SYS_WKUP2_Pin, LL_GPIO_MODE_INPUT);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d60:	481a      	ldr	r0, [pc, #104]	@ (8001dcc <MX_GPIO_Init+0x21c>)
 8001d62:	f7ff fa46 	bl	80011f2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN_EXIT_GPIO_Port, BTN_EXIT_Pin, LL_GPIO_MODE_INPUT);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d70:	f7ff fa3f 	bl	80011f2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN_BAL_GPIO_Port, BTN_BAL_Pin, LL_GPIO_MODE_INPUT);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7e:	f7ff fa38 	bl	80011f2 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d82:	f7fe fa23 	bl	80001cc <__NVIC_GetPriorityGrouping>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa73 	bl	8000278 <NVIC_EncodePriority>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	2017      	movs	r0, #23
 8001d98:	f7fe fa44 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f7fe fa23 	bl	80001e8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001da2:	f7fe fa13 	bl	80001cc <__NVIC_GetPriorityGrouping>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fa63 	bl	8000278 <NVIC_EncodePriority>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	2028      	movs	r0, #40	@ 0x28
 8001db8:	f7fe fa34 	bl	8000224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dbc:	2028      	movs	r0, #40	@ 0x28
 8001dbe:	f7fe fa13 	bl	80001e8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	@ 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	000f0003 	.word	0x000f0003
 8001dd4:	00f00003 	.word	0x00f00003
 8001dd8:	000f0002 	.word	0x000f0002
 8001ddc:	00f00002 	.word	0x00f00002

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <Error_Handler+0x8>

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_MspInit+0x44>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <HAL_MspInit+0x44>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	4a08      	ldr	r2, [pc, #32]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <HAL_SPI_MspInit+0x7c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d128      	bne.n	8001ea8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_SPI_MspInit+0x80>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e86:	23e0      	movs	r3, #224	@ 0xe0
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e96:	2305      	movs	r3, #5
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea4:	f000 fa6e 	bl	8002384 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	@ 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40013000 	.word	0x40013000
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d101      	bne.n	8001ed2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6153      	str	r3, [r2, #20]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010400 	.word	0x40010400

08001f04 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f06f 0201 	mvn.w	r2, #1
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f4a:	bf00      	nop
 8001f4c:	e7fd      	b.n	8001f4a <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <HardFault_Handler+0x4>

08001f56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	bf00      	nop
 8001f64:	e7fd      	b.n	8001f62 <BusFault_Handler+0x4>

08001f66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 f8f8 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001fb6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fba:	f7ff ff7d 	bl	8001eb8 <LL_EXTI_IsActiveFlag_0_31>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001fc4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fc8:	f7ff ff8c 	bl	8001ee4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_8 */

    /* USER CODE END LL_EXTI_LINE_8 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001fcc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fd0:	f7ff ff72 	bl	8001eb8 <LL_EXTI_IsActiveFlag_0_31>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <EXTI9_5_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8001fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fde:	f7ff ff81 	bl	8001ee4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001ff8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001ffc:	f7ff ff5c 	bl	8001eb8 <LL_EXTI_IsActiveFlag_0_31>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8002006:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800200a:	f7ff ff6b 	bl	8001ee4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */

    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800200e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002012:	f7ff ff51 	bl	8001eb8 <LL_EXTI_IsActiveFlag_0_31>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800201c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002020:	f7ff ff60 	bl	8001ee4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Alarm_IRQn 0 */
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 800203c:	4806      	ldr	r0, [pc, #24]	@ (8002058 <TIM6_IRQHandler+0x20>)
 800203e:	f7ff ff6f 	bl	8001f20 <LL_TIM_IsActiveFlag_UPDATE>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <TIM6_IRQHandler+0x1c>
	{
		LL_TIM_ClearFlag_UPDATE(TIM6);
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <TIM6_IRQHandler+0x20>)
 800204a:	f7ff ff5b 	bl	8001f04 <LL_TIM_ClearFlag_UPDATE>
		tim_delay_ms_flag = 1;
 800204e:	4b03      	ldr	r3, [pc, #12]	@ (800205c <TIM6_IRQHandler+0x24>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
	}else{}
  /* USER CODE END TIM6_IRQn 0 */
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40001000 	.word	0x40001000
 800205c:	2000008c 	.word	0x2000008c

08002060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002088:	f7ff ffea 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800208c:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800208e:	490d      	ldr	r1, [pc, #52]	@ (80020c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <LoopForever+0xe>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a4:	4c0a      	ldr	r4, [pc, #40]	@ (80020d0 <LoopForever+0x16>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020b2:	f002 f8c7 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020b6:	f7ff f932 	bl	800131e <main>

080020ba <LoopForever>:

LoopForever:
    b LoopForever
 80020ba:	e7fe      	b.n	80020ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020c8:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 80020cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020d0:	20000094 	.word	0x20000094

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <HAL_Init+0x3c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <HAL_Init+0x3c>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f000 f914 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f4:	200f      	movs	r0, #15
 80020f6:	f000 f80f 	bl	8002118 <HAL_InitTick>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	e001      	b.n	800210a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002106:	f7ff fe71 	bl	8001dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210a:	79fb      	ldrb	r3, [r7, #7]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_InitTick+0x6c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d023      	beq.n	8002174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_InitTick+0x70>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <HAL_InitTick+0x6c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f911 	bl	800236a <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d809      	bhi.n	8002168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f8e9 	bl	8002332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_InitTick+0x74>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e007      	b.n	8002178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e004      	b.n	8002178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e001      	b.n	8002178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000090 	.word	0x20000090

080021b8 <__NVIC_SetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_SetPriority>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff47 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff5c 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffb0 	bl	80022d8 <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	e14e      	b.n	8002632 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8140 	beq.w	800262c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d005      	beq.n	80023c4 <HAL_GPIO_Init+0x40>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d130      	bne.n	8002426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fa:	2201      	movs	r2, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0201 	and.w	r2, r3, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d017      	beq.n	8002462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d123      	bne.n	80024b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 809a 	beq.w	800262c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f8:	4b55      	ldr	r3, [pc, #340]	@ (8002650 <HAL_GPIO_Init+0x2cc>)
 80024fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fc:	4a54      	ldr	r2, [pc, #336]	@ (8002650 <HAL_GPIO_Init+0x2cc>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6613      	str	r3, [r2, #96]	@ 0x60
 8002504:	4b52      	ldr	r3, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2cc>)
 8002506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002510:	4a50      	ldr	r2, [pc, #320]	@ (8002654 <HAL_GPIO_Init+0x2d0>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800253a:	d013      	beq.n	8002564 <HAL_GPIO_Init+0x1e0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a46      	ldr	r2, [pc, #280]	@ (8002658 <HAL_GPIO_Init+0x2d4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <HAL_GPIO_Init+0x1dc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a45      	ldr	r2, [pc, #276]	@ (800265c <HAL_GPIO_Init+0x2d8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x1d8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a44      	ldr	r2, [pc, #272]	@ (8002660 <HAL_GPIO_Init+0x2dc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_GPIO_Init+0x1d4>
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x1e2>
 8002558:	2307      	movs	r3, #7
 800255a:	e004      	b.n	8002566 <HAL_GPIO_Init+0x1e2>
 800255c:	2302      	movs	r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x1e2>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_GPIO_Init+0x1e2>
 8002564:	2300      	movs	r3, #0
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002576:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_GPIO_Init+0x2d0>)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d2:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025fc:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_GPIO_Init+0x2e0>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	f47f aea9 	bne.w	8002394 <HAL_GPIO_Init+0x10>
  }
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	48000400 	.word	0x48000400
 800265c:	48000800 	.word	0x48000800
 8002660:	48000c00 	.word	0x48000c00
 8002664:	40010400 	.word	0x40010400

08002668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e095      	b.n	80027a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268a:	d009      	beq.n	80026a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e005      	b.n	80026a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fbba 	bl	8001e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026e0:	d902      	bls.n	80026e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e002      	b.n	80026ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80026f6:	d007      	beq.n	8002708 <HAL_SPI_Init+0xa0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	ea42 0103 	orr.w	r1, r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 0204 	and.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002784:	ea42 0103 	orr.w	r1, r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <LL_ADC_REG_SetSequencerLength>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f023 020f 	bic.w	r2, r3, #15
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <LL_ADC_IsEnabled+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_ADC_IsEnabled+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800280a:	4819      	ldr	r0, [pc, #100]	@ (8002870 <LL_ADC_CommonInit+0x74>)
 800280c:	f7ff ffe2 	bl	80027d4 <LL_ADC_IsEnabled>
 8002810:	4604      	mov	r4, r0
 8002812:	4818      	ldr	r0, [pc, #96]	@ (8002874 <LL_ADC_CommonInit+0x78>)
 8002814:	f7ff ffde 	bl	80027d4 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d120      	bne.n	8002862 <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <LL_ADC_CommonInit+0x7c>)
 800282e:	4013      	ands	r3, r2
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6852      	ldr	r2, [r2, #4]
 8002838:	4311      	orrs	r1, r2
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	6892      	ldr	r2, [r2, #8]
 800283e:	4311      	orrs	r1, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	68d2      	ldr	r2, [r2, #12]
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e00b      	b.n	8002866 <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <LL_ADC_CommonInit+0x7c>)
 8002854:	4013      	ands	r3, r2
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e001      	b.n	8002866 <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	50040000 	.word	0x50040000
 8002874:	50040100 	.word	0x50040100
 8002878:	ffc030e0 	.word	0xffc030e0

0800287c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa2 	bl	80027d4 <LL_ADC_IsEnabled>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d111      	bne.n	80028ba <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800289e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6811      	ldr	r1, [r2, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6852      	ldr	r2, [r2, #4]
 80028aa:	4311      	orrs	r1, r2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	e001      	b.n	80028be <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff7c 	bl	80027d4 <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d132      	bne.n	8002948 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <LL_ADC_REG_Init+0x90>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	4311      	orrs	r1, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6912      	ldr	r2, [r2, #16]
 8002906:	4311      	orrs	r1, r2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	6952      	ldr	r2, [r2, #20]
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e011      	b.n	800293a <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <LL_ADC_REG_Init+0x90>)
 800291c:	4013      	ands	r3, r2
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	4311      	orrs	r1, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	6912      	ldr	r2, [r2, #16]
 800292c:	4311      	orrs	r1, r2
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6952      	ldr	r2, [r2, #20]
 8002932:	430a      	orrs	r2, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff34 	bl	80027ae <LL_ADC_REG_SetSequencerLength>
 8002946:	e001      	b.n	800294c <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	fff0c03c 	.word	0xfff0c03c

0800295c <LL_EXTI_EnableIT_0_31>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <LL_EXTI_EnableIT_0_31+0x20>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4904      	ldr	r1, [pc, #16]	@ (800297c <LL_EXTI_EnableIT_0_31+0x20>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40010400 	.word	0x40010400

08002980 <LL_EXTI_EnableIT_32_63>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	620b      	str	r3, [r1, #32]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40010400 	.word	0x40010400

080029a4 <LL_EXTI_DisableIT_0_31>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4904      	ldr	r1, [pc, #16]	@ (80029c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010400 	.word	0x40010400

080029cc <LL_EXTI_DisableIT_32_63>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80029d6:	6a1a      	ldr	r2, [r3, #32]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	43db      	mvns	r3, r3
 80029dc:	4904      	ldr	r1, [pc, #16]	@ (80029f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80029de:	4013      	ands	r3, r2
 80029e0:	620b      	str	r3, [r1, #32]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010400 	.word	0x40010400

080029f4 <LL_EXTI_EnableEvent_0_31>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <LL_EXTI_EnableEvent_0_31+0x20>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4904      	ldr	r1, [pc, #16]	@ (8002a14 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40010400 	.word	0x40010400

08002a18 <LL_EXTI_EnableEvent_32_63>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002a22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a24:	4904      	ldr	r1, [pc, #16]	@ (8002a38 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40010400 	.word	0x40010400

08002a3c <LL_EXTI_DisableEvent_0_31>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4904      	ldr	r1, [pc, #16]	@ (8002a60 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40010400 	.word	0x40010400

08002a64 <LL_EXTI_DisableEvent_32_63>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4904      	ldr	r1, [pc, #16]	@ (8002a88 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010400 	.word	0x40010400

08002a8c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4904      	ldr	r1, [pc, #16]	@ (8002aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40010400 	.word	0x40010400

08002ab0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002abc:	4904      	ldr	r1, [pc, #16]	@ (8002ad0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010400 	.word	0x40010400

08002afc <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40010400 	.word	0x40010400

08002b24 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b54:	4904      	ldr	r1, [pc, #16]	@ (8002b68 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40010400 	.word	0x40010400

08002b6c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	4904      	ldr	r1, [pc, #16]	@ (8002b90 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010400 	.word	0x40010400

08002b94 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	4904      	ldr	r1, [pc, #16]	@ (8002bb8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40010400 	.word	0x40010400

08002bbc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7a1b      	ldrb	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80d0 	beq.w	8002d72 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7a5b      	ldrb	r3, [r3, #9]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d01c      	beq.n	8002c1c <LL_EXTI_Init+0x60>
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	dc25      	bgt.n	8002c32 <LL_EXTI_Init+0x76>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <LL_EXTI_Init+0x34>
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00b      	beq.n	8002c06 <LL_EXTI_Init+0x4a>
 8002bee:	e020      	b.n	8002c32 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff21 	bl	8002a3c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff feac 	bl	800295c <LL_EXTI_EnableIT_0_31>
          break;
 8002c04:	e018      	b.n	8002c38 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff feca 	bl	80029a4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff feed 	bl	80029f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002c1a:	e00d      	b.n	8002c38 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fe9b 	bl	800295c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fee2 	bl	80029f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002c30:	e002      	b.n	8002c38 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
          break;
 8002c36:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7a9b      	ldrb	r3, [r3, #10]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d030      	beq.n	8002ca2 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7a9b      	ldrb	r3, [r3, #10]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d01c      	beq.n	8002c82 <LL_EXTI_Init+0xc6>
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	dc25      	bgt.n	8002c98 <LL_EXTI_Init+0xdc>
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d002      	beq.n	8002c56 <LL_EXTI_Init+0x9a>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d00b      	beq.n	8002c6c <LL_EXTI_Init+0xb0>
 8002c54:	e020      	b.n	8002c98 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff86 	bl	8002b6c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff11 	bl	8002a8c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002c6a:	e01a      	b.n	8002ca2 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff2f 	bl	8002ad4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff52 	bl	8002b24 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c80:	e00f      	b.n	8002ca2 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff00 	bl	8002a8c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff47 	bl	8002b24 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c96:	e004      	b.n	8002ca2 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
            break;
 8002ca0:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d077      	beq.n	8002d9a <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7a5b      	ldrb	r3, [r3, #9]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d01c      	beq.n	8002cec <LL_EXTI_Init+0x130>
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	dc25      	bgt.n	8002d02 <LL_EXTI_Init+0x146>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <LL_EXTI_Init+0x104>
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00b      	beq.n	8002cd6 <LL_EXTI_Init+0x11a>
 8002cbe:	e020      	b.n	8002d02 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fecd 	bl	8002a64 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe56 	bl	8002980 <LL_EXTI_EnableIT_32_63>
          break;
 8002cd4:	e01a      	b.n	8002d0c <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fe76 	bl	80029cc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fe97 	bl	8002a18 <LL_EXTI_EnableEvent_32_63>
          break;
 8002cea:	e00f      	b.n	8002d0c <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fe45 	bl	8002980 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fe8c 	bl	8002a18 <LL_EXTI_EnableEvent_32_63>
          break;
 8002d00:	e004      	b.n	8002d0c <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
          break;
 8002d0a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7a9b      	ldrb	r3, [r3, #10]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d042      	beq.n	8002d9a <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a9b      	ldrb	r3, [r3, #10]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d01c      	beq.n	8002d56 <LL_EXTI_Init+0x19a>
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	dc25      	bgt.n	8002d6c <LL_EXTI_Init+0x1b0>
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <LL_EXTI_Init+0x16e>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d00b      	beq.n	8002d40 <LL_EXTI_Init+0x184>
 8002d28:	e020      	b.n	8002d6c <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff30 	bl	8002b94 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff feb9 	bl	8002ab0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002d3e:	e02c      	b.n	8002d9a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fed9 	bl	8002afc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fefa 	bl	8002b48 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002d54:	e021      	b.n	8002d9a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fea8 	bl	8002ab0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feef 	bl	8002b48 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002d6a:	e016      	b.n	8002d9a <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
            break;
 8002d70:	e013      	b.n	8002d9a <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fe14 	bl	80029a4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe5b 	bl	8002a3c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fe1e 	bl	80029cc <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe65 	bl	8002a64 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <LL_GPIO_SetPinMode>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b08b      	sub	sp, #44	@ 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	613b      	str	r3, [r7, #16]
  return result;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e003      	b.n	8002dd6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2103      	movs	r1, #3
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	61fb      	str	r3, [r7, #28]
  return result;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	372c      	adds	r7, #44	@ 0x2c
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_GPIO_SetPinOutputType>:
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_GPIO_SetPinSpeed>:
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b08b      	sub	sp, #44	@ 0x2c
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	613b      	str	r3, [r7, #16]
  return result;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
  return result;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e003      	b.n	8002eae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	372c      	adds	r7, #44	@ 0x2c
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_GPIO_SetPinPull>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b08b      	sub	sp, #44	@ 0x2c
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	613b      	str	r3, [r7, #16]
  return result;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2103      	movs	r1, #3
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	401a      	ands	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	61fb      	str	r3, [r7, #28]
  return result;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	60da      	str	r2, [r3, #12]
}
 8002f36:	bf00      	nop
 8002f38:	372c      	adds	r7, #44	@ 0x2c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_GPIO_SetAFPin_0_7>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b08b      	sub	sp, #44	@ 0x2c
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	613b      	str	r3, [r7, #16]
  return result;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e003      	b.n	8002f74 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	210f      	movs	r1, #15
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002f96:	2320      	movs	r3, #32
 8002f98:	e003      	b.n	8002fa2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	431a      	orrs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	372c      	adds	r7, #44	@ 0x2c
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_GPIO_SetAFPin_8_15>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b08b      	sub	sp, #44	@ 0x2c
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	613b      	str	r3, [r7, #16]
  return result;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	61fb      	str	r3, [r7, #28]
  return result;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800302e:	bf00      	nop
 8003030:	372c      	adds	r7, #44	@ 0x2c
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b088      	sub	sp, #32
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	60fb      	str	r3, [r7, #12]
  return result;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <LL_GPIO_Init+0x26>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800306a:	e048      	b.n	80030fe <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03a      	beq.n	80030f8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <LL_GPIO_Init+0x58>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d10e      	bne.n	80030b0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fed7 	bl	8002e4e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff feb7 	bl	8002e1e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	461a      	mov	r2, r3
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff05 	bl	8002ec8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d111      	bne.n	80030ea <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2bff      	cmp	r3, #255	@ 0xff
 80030ca:	d807      	bhi.n	80030dc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	461a      	mov	r2, r3
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff34 	bl	8002f42 <LL_GPIO_SetAFPin_0_7>
 80030da:	e006      	b.n	80030ea <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	461a      	mov	r2, r3
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff69 	bl	8002fbc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fe56 	bl	8002da4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1af      	bne.n	800306c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <LL_RTC_SetHourFormat>:
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RTC_GetHourFormat>:
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_RTC_EnableInitMode>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RTC_DisableInitMode>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_RTC_IsShadowRegBypassEnabled>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_RTC_SetAsynchPrescaler>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	611a      	str	r2, [r3, #16]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_RTC_SetSynchPrescaler>:
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	611a      	str	r2, [r3, #16]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_RTC_EnableWriteProtection>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	22ff      	movs	r2, #255	@ 0xff
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_RTC_DisableWriteProtection>:
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	22ca      	movs	r2, #202	@ 0xca
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2253      	movs	r2, #83	@ 0x53
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_RTC_TIME_Config>:
{
 800324a:	b480      	push	{r7}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
  temp = Format12_24                                                                                    | \
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800326e:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8003280:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_RTC_DATE_Config>:
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80032b6:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80032be:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <LL_RTC_DATE_Config+0x4c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	ff0000c0 	.word	0xff0000c0

080032e8 <LL_RTC_ALMA_SetMask>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 327f 	and.w	r2, r3, #2139062143	@ 0x7f7f7f7f
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RTC_ALMA_EnableWeekday>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_RTC_ALMA_DisableWeekday>:
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_RTC_ALMA_SetDay>:
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	061b      	lsls	r3, r3, #24
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_RTC_ALMA_SetWeekDay>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_RTC_ALMA_ConfigTime>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b087      	sub	sp, #28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	b29b      	uxth	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80033c2:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	b2db      	uxtb	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 80033d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RTC_IsActiveFlag_INIT>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RTC_IsActiveFlag_RS>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_RTC_ClearFlag_RS>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	f063 02a0 	orn	r2, r3, #160	@ 0xa0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fec9 	bl	800322a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa35 	bl	8003908 <LL_RTC_EnterInitMode>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d016      	beq.n	80034d2 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe33 	bl	8003116 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fe95 	bl	80031e6 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fe7b 	bl	80031be <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fe55 	bl	8003178 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe9c 	bl	8003210 <LL_RTC_EnableWriteProtection>

  return status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff fe1e 	bl	800313c <LL_RTC_GetHourFormat>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e008      	b.n	8003520 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff fe14 	bl	800313c <LL_RTC_GetHourFormat>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fe82 	bl	800322a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9ee 	bl	8003908 <LL_RTC_EnterInitMode>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d073      	beq.n	800361a <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	791b      	ldrb	r3, [r3, #4]
 8003540:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003546:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff fe7a 	bl	800324a <LL_RTC_TIME_Config>
 8003556:	e04f      	b.n	80035f8 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681c      	ldr	r4, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	791b      	ldrb	r3, [r3, #4]
 8003560:	4a32      	ldr	r2, [pc, #200]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	b2d8      	uxtb	r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	791a      	ldrb	r2, [r3, #4]
 8003572:	4b2e      	ldr	r3, [pc, #184]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	08d9      	lsrs	r1, r3, #3
 800357a:	460b      	mov	r3, r1
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4303      	orrs	r3, r0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	795b      	ldrb	r3, [r3, #5]
 8003590:	4a26      	ldr	r2, [pc, #152]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	08db      	lsrs	r3, r3, #3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	b2d8      	uxtb	r0, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	795a      	ldrb	r2, [r3, #5]
 80035a2:	4b22      	ldr	r3, [pc, #136]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	08d9      	lsrs	r1, r3, #3
 80035aa:	460b      	mov	r3, r1
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	4303      	orrs	r3, r0
 80035b8:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80035ba:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	799b      	ldrb	r3, [r3, #6]
 80035c0:	4a1a      	ldr	r2, [pc, #104]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	b2d8      	uxtb	r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	799a      	ldrb	r2, [r3, #6]
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <LL_RTC_TIME_Init+0x148>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	08d9      	lsrs	r1, r3, #3
 80035da:	460b      	mov	r3, r1
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4303      	orrs	r3, r0
 80035e8:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4633      	mov	r3, r6
 80035ee:	462a      	mov	r2, r5
 80035f0:	4621      	mov	r1, r4
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff fe29 	bl	800324a <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fdbd 	bl	8003178 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff fdca 	bl	8003198 <LL_RTC_IsShadowRegBypassEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9af 	bl	800396e <LL_RTC_WaitForSynchro>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]
 8003614:	e001      	b.n	800361a <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff fdf8 	bl	8003210 <LL_RTC_EnableWriteProtection>

  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362a:	bf00      	nop
 800362c:	cccccccd 	.word	0xcccccccd

08003630 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b089      	sub	sp, #36	@ 0x24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <LL_RTC_DATE_Init+0x34>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (uint8_t)(((uint32_t) RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	330a      	adds	r3, #10
 800365e:	b2da      	uxtb	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff fde0 	bl	800322a <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f94c 	bl	8003908 <LL_RTC_EnterInitMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d075      	beq.n	8003762 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	789b      	ldrb	r3, [r3, #2]
 8003686:	461a      	mov	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	4618      	mov	r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	4603      	mov	r3, r0
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff fdfe 	bl	8003298 <LL_RTC_DATE_Config>
 800369c:	e050      	b.n	8003740 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461c      	mov	r4, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	789b      	ldrb	r3, [r3, #2]
 80036a8:	4a32      	ldr	r2, [pc, #200]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	08db      	lsrs	r3, r3, #3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	b2d8      	uxtb	r0, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	789a      	ldrb	r2, [r3, #2]
 80036ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	08d9      	lsrs	r1, r3, #3
 80036c2:	460b      	mov	r3, r1
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4303      	orrs	r3, r0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	08db      	lsrs	r3, r3, #3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	b2d8      	uxtb	r0, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	785a      	ldrb	r2, [r3, #1]
 80036ea:	4b22      	ldr	r3, [pc, #136]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	08d9      	lsrs	r1, r3, #3
 80036f2:	460b      	mov	r3, r1
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4303      	orrs	r3, r0
 8003700:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003702:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	4a1a      	ldr	r2, [pc, #104]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	b2d8      	uxtb	r0, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	78da      	ldrb	r2, [r3, #3]
 800371a:	4b16      	ldr	r3, [pc, #88]	@ (8003774 <LL_RTC_DATE_Init+0x144>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	08d9      	lsrs	r1, r3, #3
 8003722:	460b      	mov	r3, r1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4303      	orrs	r3, r0
 8003730:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4633      	mov	r3, r6
 8003736:	462a      	mov	r2, r5
 8003738:	4621      	mov	r1, r4
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff fdac 	bl	8003298 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fd19 	bl	8003178 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff fd26 	bl	8003198 <LL_RTC_IsShadowRegBypassEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f90b 	bl	800396e <LL_RTC_WaitForSynchro>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]
 800375c:	e001      	b.n	8003762 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fd54 	bl	8003210 <LL_RTC_EnableWriteProtection>

  return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003772:	bf00      	nop
 8003774:	cccccccd 	.word	0xcccccccd

08003778 <LL_RTC_ALMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ALARMA registers are configured
  *          - ERROR: ALARMA registers are not configured
  */
ErrorStatus LL_RTC_ALMA_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_AlarmTypeDef *RTC_AlarmStruct)
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <LL_RTC_ALMA_Init+0x26>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fcd6 	bl	800313c <LL_RTC_GetHourFormat>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <LL_RTC_ALMA_Init+0x38>
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e008      	b.n	80037b0 <LL_RTC_ALMA_Init+0x38>
      assert_param(IS_LL_RTC_WEEKDAY(RTC_AlarmStruct->AlarmDateWeekDay));
    }
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fccc 	bl	800313c <LL_RTC_GetHourFormat>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <LL_RTC_ALMA_Init+0x38>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_AlarmStruct->AlarmTime.Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
      assert_param(IS_LL_RTC_WEEKDAY(__LL_RTC_CONVERT_BCD2BIN(RTC_AlarmStruct->AlarmDateWeekDay)));
    }
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff fd3a 	bl	800322a <LL_RTC_DisableWriteProtection>

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d128      	bne.n	8003810 <LL_RTC_ALMA_Init+0x98>
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fdb5 	bl	800332e <LL_RTC_ALMA_DisableWeekday>
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <LL_RTC_ALMA_Init+0x60>
    {
      LL_RTC_ALMA_SetDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7c1b      	ldrb	r3, [r3, #16]
 80037ce:	4619      	mov	r1, r3
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fdbc 	bl	800334e <LL_RTC_ALMA_SetDay>
 80037d6:	e024      	b.n	8003822 <LL_RTC_ALMA_Init+0xaa>
    }
    else
    {
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7c1b      	ldrb	r3, [r3, #16]
 80037dc:	4a49      	ldr	r2, [pc, #292]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	08db      	lsrs	r3, r3, #3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	b2d8      	uxtb	r0, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7c1a      	ldrb	r2, [r3, #16]
 80037ee:	4b45      	ldr	r3, [pc, #276]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	08d9      	lsrs	r1, r3, #3
 80037f6:	460b      	mov	r3, r1
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4303      	orrs	r3, r0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7ff fda0 	bl	800334e <LL_RTC_ALMA_SetDay>
 800380e:	e008      	b.n	8003822 <LL_RTC_ALMA_Init+0xaa>
    }
  }
  else
  {
    /* Set the week day for ALARM */
    LL_RTC_ALMA_EnableWeekday(RTCx);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd7c 	bl	800330e <LL_RTC_ALMA_EnableWeekday>
    LL_RTC_ALMA_SetWeekDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7c1b      	ldrb	r3, [r3, #16]
 800381a:	4619      	mov	r1, r3
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fdaa 	bl	8003376 <LL_RTC_ALMA_SetWeekDay>
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <LL_RTC_ALMA_Init+0xd0>
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	791b      	ldrb	r3, [r3, #4]
 8003830:	461a      	mov	r2, r3
                           RTC_AlarmStruct->AlarmTime.Minutes, RTC_AlarmStruct->AlarmTime.Seconds);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	795b      	ldrb	r3, [r3, #5]
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8003836:	4618      	mov	r0, r3
                           RTC_AlarmStruct->AlarmTime.Minutes, RTC_AlarmStruct->AlarmTime.Seconds);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	799b      	ldrb	r3, [r3, #6]
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4603      	mov	r3, r0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fdac 	bl	800339e <LL_RTC_ALMA_ConfigTime>
 8003846:	e04f      	b.n	80038e8 <LL_RTC_ALMA_Init+0x170>
  }
  else
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681c      	ldr	r4, [r3, #0]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	791b      	ldrb	r3, [r3, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	08db      	lsrs	r3, r3, #3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	b2d8      	uxtb	r0, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	791a      	ldrb	r2, [r3, #4]
 8003862:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	08d9      	lsrs	r1, r3, #3
 800386a:	460b      	mov	r3, r1
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	4303      	orrs	r3, r0
 8003878:	b2db      	uxtb	r3, r3
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 800387a:	461d      	mov	r5, r3
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	795b      	ldrb	r3, [r3, #5]
 8003880:	4a20      	ldr	r2, [pc, #128]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	08db      	lsrs	r3, r3, #3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	b2d8      	uxtb	r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	795a      	ldrb	r2, [r3, #5]
 8003892:	4b1c      	ldr	r3, [pc, #112]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 8003894:	fba3 1302 	umull	r1, r3, r3, r2
 8003898:	08d9      	lsrs	r1, r3, #3
 800389a:	460b      	mov	r3, r1
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4303      	orrs	r3, r0
 80038a8:	b2db      	uxtb	r3, r3
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80038aa:	461e      	mov	r6, r3
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	799b      	ldrb	r3, [r3, #6]
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	08db      	lsrs	r3, r3, #3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	b2d8      	uxtb	r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	799a      	ldrb	r2, [r3, #6]
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <LL_RTC_ALMA_Init+0x18c>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	08d9      	lsrs	r1, r3, #3
 80038ca:	460b      	mov	r3, r1
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4303      	orrs	r3, r0
 80038d8:	b2db      	uxtb	r3, r3
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4633      	mov	r3, r6
 80038de:	462a      	mov	r2, r5
 80038e0:	4621      	mov	r1, r4
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fd5b 	bl	800339e <LL_RTC_ALMA_ConfigTime>
  }
  /* Set ALARM mask */
  LL_RTC_ALMA_SetMask(RTCx, RTC_AlarmStruct->AlarmMask);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4619      	mov	r1, r3
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff fcfa 	bl	80032e8 <LL_RTC_ALMA_SetMask>

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff fc8b 	bl	8003210 <LL_RTC_EnableWriteProtection>

  return SUCCESS;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003904:	cccccccd 	.word	0xcccccccd

08003908 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8003910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003914:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fd66 	bl	80033ec <LL_RTC_IsActiveFlag_INIT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11e      	bne.n	8003964 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fc16 	bl	8003158 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fd5d 	bl	80033ec <LL_RTC_IsActiveFlag_INIT>
 8003932:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003934:	e010      	b.n	8003958 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003936:	f7ff fd91 	bl	800345c <LL_SYSTICK_IsActiveCounterFlag>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fd50 	bl	80033ec <LL_RTC_IsActiveFlag_INIT>
 800394c:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <LL_RTC_EnterInitMode+0x5c>
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d1e8      	bne.n	8003936 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8003976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800397a:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fd59 	bl	8003438 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fd43 	bl	8003412 <LL_RTC_IsActiveFlag_RS>
 800398c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 800398e:	e010      	b.n	80039b2 <LL_RTC_WaitForSynchro+0x44>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003990:	f7ff fd64 	bl	800345c <LL_SYSTICK_IsActiveCounterFlag>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <LL_RTC_WaitForSynchro+0x32>
    {
      timeout--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fd36 	bl	8003412 <LL_RTC_IsActiveFlag_RS>
 80039a6:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <LL_RTC_WaitForSynchro+0x44>
    {
      status = ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <LL_RTC_WaitForSynchro+0x50>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d1e8      	bne.n	8003990 <LL_RTC_WaitForSynchro+0x22>
    }
  }

  return (status);
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <LL_TIM_SetPrescaler>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_TIM_SetAutoReload>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_TIM_SetRepetitionCounter>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_TIM_OC_SetCompareCH1>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_TIM_OC_SetCompareCH2>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_TIM_OC_SetCompareCH3>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_TIM_OC_SetCompareCH4>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_TIM_OC_SetCompareCH5>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_TIM_OC_SetCompareCH6>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	615a      	str	r2, [r3, #20]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <LL_TIM_Init+0xb0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <LL_TIM_Init+0x20>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b06:	d106      	bne.n	8003b16 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	@ (8003b98 <LL_TIM_Init+0xb0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <LL_TIM_Init+0x4e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b24:	d007      	beq.n	8003b36 <LL_TIM_Init+0x4e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	@ (8003b9c <LL_TIM_Init+0xb4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <LL_TIM_Init+0x4e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba0 <LL_TIM_Init+0xb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d106      	bne.n	8003b44 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff47 	bl	80039e4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff33 	bl	80039c8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <LL_TIM_Init+0xb0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <LL_TIM_Init+0x92>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b9c <LL_TIM_Init+0xb4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <LL_TIM_Init+0x92>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <LL_TIM_Init+0xb8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d105      	bne.n	8003b86 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff3d 	bl	8003a00 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff9e 	bl	8003ac8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400

08003ba4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bba:	d045      	beq.n	8003c48 <LL_TIM_OC_Init+0xa4>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc2:	d848      	bhi.n	8003c56 <LL_TIM_OC_Init+0xb2>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bca:	d036      	beq.n	8003c3a <LL_TIM_OC_Init+0x96>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd2:	d840      	bhi.n	8003c56 <LL_TIM_OC_Init+0xb2>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d027      	beq.n	8003c2c <LL_TIM_OC_Init+0x88>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be2:	d838      	bhi.n	8003c56 <LL_TIM_OC_Init+0xb2>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bea:	d018      	beq.n	8003c1e <LL_TIM_OC_Init+0x7a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d830      	bhi.n	8003c56 <LL_TIM_OC_Init+0xb2>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d003      	beq.n	8003c02 <LL_TIM_OC_Init+0x5e>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d007      	beq.n	8003c10 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003c00:	e029      	b.n	8003c56 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f891 	bl	8003d2c <OC1Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0e:	e023      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8fe 	bl	8003e14 <OC2Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e01c      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f96f 	bl	8003f04 <OC3Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2a:	e015      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f9e0 	bl	8003ff4 <OC4Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e00e      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa39 	bl	80040b4 <OC5Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]
      break;
 8003c46:	e007      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa8a 	bl	8004164 <OC6Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	e000      	b.n	8003c58 <LL_TIM_OC_Init+0xb4>
      break;
 8003c56:	bf00      	nop
  }

  return result;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	7b12      	ldrb	r2, [r2, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	89d2      	ldrh	r2, [r2, #14]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <LL_TIM_BDTR_Init+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d114      	bne.n	8003d14 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40012c00 	.word	0x40012c00

08003d2c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0202 	bic.w	r2, r3, #2
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <OC1Config+0xdc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <OC1Config+0x76>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <OC1Config+0xe0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <OC1Config+0x76>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <OC1Config+0xe4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d11e      	bne.n	8003de0 <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0208 	bic.w	r2, r3, #8
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0204 	bic.w	r2, r3, #4
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe12 	bl	8003a1c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400

08003e14 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0210 	bic.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	0212      	lsls	r2, r2, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0220 	bic.w	r2, r3, #32
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0210 	bic.w	r2, r3, #16
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef8 <OC2Config+0xe4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <OC2Config+0x7c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <OC2Config+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <OC2Config+0x7c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <OC2Config+0xec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d11f      	bne.n	8003ed0 <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	019b      	lsls	r3, r3, #6
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	019b      	lsls	r3, r3, #6
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fda8 	bl	8003a38 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400

08003f04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe8 <OC3Config+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <OC3Config+0x7a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1e      	ldr	r2, [pc, #120]	@ (8003fec <OC3Config+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d003      	beq.n	8003f7e <OC3Config+0x7a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <OC3Config+0xec>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d11f      	bne.n	8003fbe <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	015b      	lsls	r3, r3, #5
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fd3f 	bl	8003a54 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40014400 	.word	0x40014400

08003ff4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	0212      	lsls	r2, r2, #8
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	031b      	lsls	r3, r3, #12
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <OC4Config+0xb4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <OC4Config+0x7c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a12      	ldr	r2, [pc, #72]	@ (80040ac <OC4Config+0xb8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <OC4Config+0x7c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <OC4Config+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d107      	bne.n	8004080 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	019b      	lsls	r3, r3, #6
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fcec 	bl	8003a70 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400

080040b4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <OC5Config+0xa4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <OC5Config+0x6c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a12      	ldr	r2, [pc, #72]	@ (800415c <OC5Config+0xa8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <OC5Config+0x6c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a11      	ldr	r2, [pc, #68]	@ (8004160 <OC5Config+0xac>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fca3 	bl	8003a8c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400

08004164 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	0212      	lsls	r2, r2, #8
 8004196:	4313      	orrs	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	051b      	lsls	r3, r3, #20
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <OC6Config+0xa4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <OC6Config+0x6e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a11      	ldr	r2, [pc, #68]	@ (800420c <OC6Config+0xa8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <OC6Config+0x6e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a10      	ldr	r2, [pc, #64]	@ (8004210 <OC6Config+0xac>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d109      	bne.n	80041e6 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	029b      	lsls	r3, r3, #10
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fc5a 	bl	8003aac <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400

08004214 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800421c:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <LL_SetSystemCoreClock+0x1c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000000 	.word	0x20000000

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	@ (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	@ (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	@ (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	@ (8004288 <__libc_init_array+0x44>)
 8004258:	f000 f818 	bl	800428c <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	080042dc 	.word	0x080042dc
 8004280:	080042dc 	.word	0x080042dc
 8004284:	080042dc 	.word	0x080042dc
 8004288:	080042e0 	.word	0x080042e0

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
